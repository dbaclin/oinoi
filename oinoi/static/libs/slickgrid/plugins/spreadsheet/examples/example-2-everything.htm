<!DOCTYPE HTML>
<html>
    <head>
        <!--Example based on SlickGrid examples - https://github.com/mleibman/SlickGrid/tree/master/examples -->
        <meta http-equiv="Content-Type" content="text/html">
        <title>SlickGrid Filter and Overlay example</title>
        <link rel="stylesheet" href="../css/slick.grid.css" type="text/css" />
        <link rel="stylesheet" href="../plugins-common.css" type="text/css" />
        <link rel="stylesheet" href="../plugins-gdoc-style.css" type="text/css" />
        <style>
            #status {
                position: absolute;
                bottom: 0;
                background-color: #F5F5F5;
                color: white;
                height: 26px;
                width: 100%;
            }

            .excel-grid {
                position: absolute;
                top: 55px;
                left: 0;
                right: 0;
                bottom: 26px;
            }

            #status-label {
                margin: 4px;
            }
        </style>
    </head>
<body>
    <div>
        <ul>
            <li>Demonstrates the Row and Header overlays, the Selected Cell overlay, filter, and Fill Down</li>
            <li>The <i>Title</i> column is editable so has the fill down function enabled</li>
        </ul>
    </div>
    <div id="grid" class="excel-grid">
    </div>
    <div id="status">
        <label id="status-label"></label>
    </div>
    <script type="text/javascript" src="../scripts/jquery-1.10.1.js"></script>
    <script type="text/javascript" src="../scripts/jquery.event.drag.js"></script>
    <script type="text/javascript" src="../scripts/SlickGrid/slick.core.js"></script>
    <script type="text/javascript" src="../scripts/SlickGrid/slick.grid.js"></script>
    <script type="text/javascript" src="../scripts/SlickGrid/slick.dataview.js"></script>
    <script type="text/javascript" src="../scripts/SlickGrid/slick.editors.js"></script>
    <script type="text/javascript" src="../scripts/SlickGrid/Plugins/slick.cellrangeselector.js"></script>
    <script type="text/javascript" src="../scripts/SlickGrid/Plugins/slick.cellselectionmodel.js"></script>
    <script type="text/javascript" src="../scripts/SlickGrid/Plugins/slick.cellrangedecorator.js"></script>
    <script type="text/javascript" src="../scripts/underscore.js"></script>
    <script type="text/javascript" src="../ext.headerfilter.js"></script>
    <script type="text/javascript" src="../ext.overlays.js"></script>
    <script>
        var grid;
        var columns = [
            { id: "id", name: "Id", field: "id", width: 80 },
            { id: "title", name: "Title", field: "title", editor: Slick.Editors.Text, width: 180 },
            { id: "duration", name: "Duration", field: "duration", width: 100 },
            { id: "pc", name: "% Complete", field: "percentComplete", width: 100 },
            { id: "start", name: "Start", field: "start", width: 80 },
            { id: "finish", name: "Finish", field: "finish", width: 80 },
            { id: "effort-driven", name: "Effort Driven", field: "effortDriven", width: 120 }
        ];

        var options = {
            enableCellNavigation: true,
            enableColumnReorder: false,
            explicitInitialization: true,
            editable: true
        };

        $(function () {
            var data = [];
            for (var i = 0; i < 500; i++) {
                data[i] = {
                    id: i,
                    title: "Task " + i,
                    duration: i % 20 + " days",
                    percentComplete: Math.round(Math.random() * 100),
                    start: "01/01/2009",
                    finish: "01/05/2009",
                    effortDriven: (i % 5 == 0)
                };
            }

            var dataView = new Slick.Data.DataView();

            grid = new Slick.Grid("#grid", dataView, columns, options);

            grid.setSelectionModel(new Slick.CellSelectionModel());

            dataView.onRowCountChanged.subscribe(function (e, args) {
                grid.updateRowCount();
                grid.render();
            });

            dataView.onRowsChanged.subscribe(function (e, args) {
                grid.invalidateRows(args.rows);
                grid.render();
            });

            dataView.beginUpdate();
            dataView.setItems(data);
            dataView.setFilter(filter);
            dataView.endUpdate();

            var filterPlugin = new Ext.Plugins.HeaderFilter({});

            filterPlugin.onFilterApplied.subscribe(function () {
                dataView.refresh();
                grid.resetActiveCell();

                var status;

                if (dataView.getLength() === dataView.getItems().length) {
                    status = "";
                } else {
                    status = dataView.getLength() + ' OF ' + dataView.getItems().length + ' RECORDS FOUND';
                }
                $('#status-label').text(status);
            });

            filterPlugin.onCommand.subscribe(function (e, args) {
                var comparer = function (a, b) {
                    return a[args.column.field] > b[args.column.field];
                };

                switch (args.command) {
                    case "sort-asc":
                        dataView.sort(comparer, true);
                        break;
                    case "sort-desc":
                        dataView.sort(comparer, false);
                        break;
                }
            });

            grid.registerPlugin(filterPlugin);

            var overlayPlugin = new Ext.Plugins.Overlays({ decoratorWidth: 1});

            overlayPlugin.onFillUpDown.subscribe(function (e, args) {
                var column = grid.getColumns()[args.range.fromCell];

                if (!column.editor) {
                    return;
                }

                var value = dataView.getItem(args.range.fromRow)[column.field];

                dataView.beginUpdate();

                for (var i = args.range.fromRow + 1; i <= args.range.toRow; i++) {
                    dataView.getItem(i)[column.field] = value;
                    grid.invalidateRow(i);
                }

                dataView.endUpdate();
                grid.render();
            });

            grid.registerPlugin(overlayPlugin);

            grid.init();

            function filter(item) {
                var columns = grid.getColumns();

                var value = true;

                for (var i = 0; i < columns.length; i++) {
                    var col = columns[i];
                    var filterValues = col.filterValues;

                    if (filterValues && filterValues.length > 0) {
                        value = value & _.contains(filterValues, item[col.field]);
                    }
                }
                return value;
            }
        });
    </script>
</body>
</html>
